{"version":3,"sources":["utils/request.js","views/Plantacao/Plantacao.js"],"names":["headers","localStorage","getItem","axiosInstance","Axios","create","baseURL","Plantacao","plantacaoId","useRouteMatch","params","useState","plantacao","setPlantacao","charts","setCharts","sensorTempBancData","map","item","date","value","sensorTempBanc","sensorTempSolData","sensorTempSol","sensorPhData","sensorPh","sensorEcData","sensorEc","tooltipCelsius","tooltipLabelFormatter","_","moment","format","legendFormatter","useEffect","a","get","plantacaoResponse","chartsResponse","data","console","error","getPlantacao","CustomizedAxisTick","x","y","payload","transform","dy","textAnchor","fill","xs","hover","bordered","striped","responsive","size","idPlantacao","semeio","dataInicio","dataFim","nomeBancada","length","sm","className","style","height","marginTop","margin","top","right","left","bottom","strokeDasharray","dataKey","tick","interval","formatter","labelFormatter","tempBancMax","label","stroke","tempBancMin","type","tempSolMax","tempSolMin","phMax","phMin","ecMax","ecMin"],"mappings":"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","file":"static/js/27.02c750a8.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nexport const API = 'https://hydroponics-api.azurewebsites.net//api';\r\n\r\nconst headers = {};\r\n\r\nheaders['Content-Type'] = 'application/json';\r\nheaders['Authorization'] = `Bearer ${localStorage.getItem('autenticarlogin')}`\r\n\r\nconst axiosInstance = Axios.create({\r\n    baseURL: API,\r\n    headers,\r\n})\r\n\r\nexport default axiosInstance;","import React, { useEffect, useState } from 'react';\r\nimport { Card, CardBody, CardHeader, Col, Row, Table, CardTitle } from 'reactstrap';\r\nimport { useRouteMatch } from 'react-router-dom';\r\nimport moment from \"moment\";\r\nimport axiosInstance from '../../utils/request';\r\nimport { Legend, ReferenceLine, LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip, ResponsiveContainer } from 'recharts';\r\n\r\nconst Plantacao = () => {\r\n  const { plantacaoId } = useRouteMatch().params;\r\n  const [plantacao, setPlantacao] = useState(null);\r\n  const [charts, setCharts] = useState(null);\r\n  const sensorTempBancData = charts?.map((item) => ({ date: item.date, value: item.sensorTempBanc.value })) || []\r\n  const sensorTempSolData = charts?.map((item) => ({ date: item.date, value: item.sensorTempSol.value })) || []\r\n  const sensorPhData = charts?.map((item) => ({ date: item.date, value: item.sensorPh.value })) || []\r\n  const sensorEcData = charts?.map((item) => ({ date: item.date, value: item.sensorEc.value })) || []\r\n  const tooltopEc = (value) => [value + ' mS/cm', 'Valor'];\r\n  const tooltipFormatter = (value) => [value, 'Valor'];\r\n  const tooltipCelsius = (value) => [value + ' °C', 'Valor'];\r\n  const tooltipLabelFormatter = (_) => {\r\n    return moment(_).format(\"DD/MM/YYYY HH:mm\");\r\n  };\r\n\r\n  const legendFormatter = (value) => {\r\n    return \"Valor\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getPlantacao = async () => {\r\n      try {\r\n        // 'buscar plantação'\r\n        const plantacaoResponse = await axiosInstance.get(`Plantacao/${plantacaoId}`);\r\n        const chartsResponse = await axiosInstance.get(`Plantacao/${plantacaoId}/Graphics`)\r\n        setPlantacao(plantacaoResponse.data);\r\n        setCharts(chartsResponse.data);\r\n      } catch (err) {\r\n        console.error('erro', err)\r\n      }\r\n    }\r\n    getPlantacao();\r\n  }, [plantacaoId]);\r\n\r\n  const CustomizedAxisTick = ({ x, y, payload }) => {\r\n    const value = moment(payload.value).format(\"DD/MM/YYYY HH:mm\");\r\n\r\n    return (\r\n      <g transform={`translate(${x},${y})`}>\r\n        <text\r\n          x={0}\r\n          y={0}\r\n          dy={16}\r\n          textAnchor=\"end\"\r\n          fill=\"#666\"\r\n          transform=\"rotate(-40)\"\r\n        >\r\n          {value}\r\n        </text>\r\n      </g>\r\n    );\r\n  };\r\n\r\n  return <Row>\r\n    <Col xs=\"12\">\r\n      <Card>\r\n        <CardHeader>\r\n          <strong>Plantação</strong>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Table hover bordered striped responsive size=\"sm\">\r\n            <thead>\r\n              <tr>\r\n                <th>Número</th>\r\n                <th>Tipo de semeio</th>\r\n                <th>Data de Criação</th>\r\n                <th>Data de Término</th>\r\n                <th>Bancada</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>{plantacao?.idPlantacao}</td>\r\n                <td>{plantacao?.semeio}</td>\r\n                <td>{moment(plantacao?.dataInicio).format('DD/MM/YYYY')}</td>\r\n                <td>{moment(plantacao?.dataFim).format('DD/MM/YYYY')}</td>\r\n                <td>{plantacao?.nomeBancada}</td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </Col>\r\n    <Col>\r\n      <Card>\r\n        <CardHeader>\r\n          <strong>Sensores</strong>\r\n        </CardHeader>\r\n        {charts?.length > 0 ? <>\r\n          <CardBody>\r\n            <Row>\r\n              <Col sm=\"5\">\r\n                <CardTitle><h4>Temperatura da bancada (°C)</h4></CardTitle>\r\n              </Col>\r\n            </Row>\r\n            <div className=\"chart-wrapper\" style={{ height: 400 + 'px', marginTop: 40 + 'px' }}>\r\n              <ResponsiveContainer>\r\n                <LineChart\r\n                  data={sensorTempBancData}\r\n                  margin={{\r\n                    top: 20, right: 50, left: 20, bottom: 5,\r\n                  }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"date\" tick={<CustomizedAxisTick />}\r\n                    height={120}\r\n                    interval={0} />\r\n                  <YAxis />\r\n                  <Tooltip formatter={tooltipCelsius}\r\n                    labelFormatter={tooltipLabelFormatter} />\r\n                  <Legend formatter={legendFormatter} />\r\n                  <ReferenceLine y={plantacao?.tempBancMax} label=\"Max\" stroke=\"red\" />\r\n                  <ReferenceLine y={plantacao?.tempBancMin} label=\"Min\" stroke=\"red\" />\r\n                  <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardBody>\r\n          <hr></hr>\r\n          <CardBody>\r\n            <Row>\r\n              <Col sm=\"5\">\r\n                <CardTitle><h4>Temperatura da solução (°C)</h4></CardTitle>\r\n              </Col>\r\n            </Row>\r\n            <div className=\"chart-wrapper\" style={{ height: 400 + 'px', marginTop: 40 + 'px' }}>\r\n              <ResponsiveContainer>\r\n                <LineChart\r\n                  data={sensorTempSolData}\r\n                  margin={{\r\n                    top: 20, right: 50, left: 20, bottom: 5,\r\n                  }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"date\" tick={<CustomizedAxisTick />}\r\n                    height={120}\r\n                    interval={0} />\r\n                  <YAxis />\r\n                  <Tooltip formatter={tooltipCelsius}\r\n                    labelFormatter={tooltipLabelFormatter} />\r\n                  <Legend formatter={legendFormatter} />\r\n                  <ReferenceLine y={plantacao?.tempSolMax} label=\"Max\" stroke=\"red\" />\r\n                  <ReferenceLine y={plantacao?.tempSolMin} label=\"Min\" stroke=\"red\" />\r\n                  <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardBody>\r\n          <hr></hr>\r\n          <CardBody>\r\n            <Row>\r\n              <Col sm=\"5\">\r\n                <CardTitle><h4>Medição de PH</h4></CardTitle>\r\n              </Col>\r\n            </Row>\r\n            <div className=\"chart-wrapper\" style={{ height: 400 + 'px', marginTop: 40 + 'px' }}>\r\n              <ResponsiveContainer>\r\n                <LineChart\r\n                  data={sensorPhData}\r\n                  margin={{\r\n                    top: 20, right: 50, left: 20, bottom: 5,\r\n                  }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"date\" tick={<CustomizedAxisTick />}\r\n                    height={120}\r\n                    interval={0} />\r\n                  <YAxis />\r\n                  <Tooltip formatter={tooltipFormatter}\r\n                    labelFormatter={tooltipLabelFormatter} />\r\n                  <Legend formatter={legendFormatter} />\r\n                  <ReferenceLine y={plantacao?.phMax} label=\"Max\" stroke=\"red\" />\r\n                  <ReferenceLine y={plantacao?.phMin} label=\"Min\" stroke=\"red\" />\r\n                  <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardBody>\r\n          <hr></hr>\r\n          <CardBody>\r\n            <Row>\r\n              <Col sm=\"5\">\r\n                <CardTitle><h4>Medição de EC (mS/cm)</h4></CardTitle>\r\n              </Col>\r\n            </Row>\r\n            <div className=\"chart-wrapper\" style={{ height: 400 + 'px', marginTop: 40 + 'px' }}>\r\n              <ResponsiveContainer>\r\n                <LineChart\r\n                  data={sensorEcData}\r\n                  margin={{\r\n                    top: 20, right: 50, left: 20, bottom: 5,\r\n                  }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"date\" tick={<CustomizedAxisTick />}\r\n                    height={120}\r\n                    interval={0} />\r\n                  <YAxis />\r\n                  <Tooltip formatter={tooltopEc}\r\n                    labelFormatter={tooltipLabelFormatter} />\r\n                  <Legend formatter={legendFormatter} />\r\n                  <ReferenceLine y={plantacao?.ecMax} label=\"Max\" stroke=\"red\" />\r\n                  <ReferenceLine y={plantacao?.ecMin} label=\"Min\" stroke=\"red\" />\r\n                  <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardBody>\r\n        </> : (<CardBody>Ainda não foram coletados dados.</CardBody>)}\r\n      </Card>\r\n    </Col>\r\n  </Row>\r\n}\r\n\r\nexport default Plantacao;"],"sourceRoot":""}