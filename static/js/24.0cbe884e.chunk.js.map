{"version":3,"sources":["utils/request.js","views/Cadastro.js"],"names":["headers","localStorage","getItem","axiosInstance","Axios","create","baseURL","Cadastro","state","nome","email","senha","checkSenha","erro","showError","modalAberto","efetuaCadastro","event","a","preventDefault","Error","body","post","status","toggleModal","setState","message","prosseguirCadastro","props","history","push","dismissError","this","target","name","value","className","md","lg","xl","onSubmit","addonType","type","placeholder","autoComplete","onChange","atualizaStateCampo","bind","color","block","data-toggle","data-target","isOpen","toggle","centered","onClick","Component"],"mappings":"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","file":"static/js/24.0cbe884e.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nexport const API = 'https://hydroponics-api.azurewebsites.net//api';\r\n\r\nconst headers = {};\r\n\r\nheaders['Content-Type'] = 'application/json';\r\nheaders['Authorization'] = `Bearer ${localStorage.getItem('autenticarlogin')}`\r\n\r\nconst axiosInstance = Axios.create({\r\n    baseURL: API,\r\n    headers,\r\n})\r\n\r\nexport default axiosInstance;","import React, { Component } from 'react';\r\nimport { Button, Card, CardBody, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row, Modal, ModalFooter, ModalBody, Alert } from 'reactstrap';\r\nimport axiosInstance from '../utils/request';\r\n\r\nclass Cadastro extends Component {\r\n  state = {\r\n    nome: '',\r\n    email: '',\r\n    senha: '',\r\n    checkSenha: '',\r\n    erro: '',\r\n    showError: false,\r\n    modalAberto: false,\r\n  }\r\n\r\n  efetuaCadastro = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      if (this.state.senha !== this.state.checkSenha) {\r\n        throw new Error(\"As senhas não são iguais\");\r\n      }\r\n\r\n      const body = { nome: this.state.nome, email: this.state.email, senha: this.state.senha, checkSenha: this.state.checkSenha };\r\n      const response = await axiosInstance.post('Produtor', body);\r\n\r\n      if (response.status === 200) {\r\n        this.toggleModal();\r\n      }\r\n\r\n    } catch (err) {\r\n      this.setState({ showError: true, erro: err.message });\r\n    }\r\n  }\r\n\r\n  prosseguirCadastro = () => {\r\n    const { history } = this.props;\r\n\r\n    history.push('/login');\r\n\r\n    this.toggleModal();\r\n  }\r\n\r\n  toggleModal = () => this.setState({ modalAberto: !this.state.modalAberto });\r\n\r\n  dismissError = () => this.setState({ erro: '', showError: false });\r\n\r\n  atualizaStateCampo(event) {\r\n    this.setState({ [event.target.name]: event.target.value })\r\n    this.setState()\r\n  } \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={this.efetuaCadastro}>\r\n                    <h1>Cadastro</h1>\r\n                    <p className=\"text-muted\">Crie sua conta</p>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-user\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Nome\"\r\n                        autoComplete=\"nome\"\r\n                        name=\"nome\"\r\n                        value={this.state.nome}\r\n                        onChange={this.atualizaStateCampo.bind(this)}\r\n                      />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>@</InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        type=\"text\"\r\n                        placeholder=\"E-mail\"\r\n                        autoComplete=\"e-mail\"\r\n                        name=\"email\"\r\n                        value={this.state.email}\r\n                        onChange={this.atualizaStateCampo.bind(this)}\r\n                      />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        type=\"password\"\r\n                        placeholder=\"Senha\"\r\n                        autoComplete=\"nova-senha\"\r\n                        name=\"senha\"\r\n                        value={this.state.senha}\r\n                        onChange={this.atualizaStateCampo.bind(this)}\r\n                      />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-4\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        type=\"password\"\r\n                        placeholder=\"Repita a senha\"\r\n                        autoComplete=\"nova-senha\"\r\n                        name=\"checkSenha\"\r\n                        value={this.state.checkSenha}\r\n                        onChange={this.atualizaStateCampo.bind(this)}\r\n                      />\r\n                    </InputGroup>\r\n                    <Button color=\"success\" block className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#ExemploModalCentralizado\">\r\n                      Cadastrar\r\n                    </Button>\r\n                  </Form>\r\n                  <Modal isOpen={this.state.modalAberto} toggle={this.toggleModal} centered>\r\n                    <ModalBody>Cadastro efetuado com sucesso</ModalBody>\r\n                    <ModalFooter>\r\n                      <Button color=\"primary\" onClick={this.prosseguirCadastro}>Prosseguir</Button>\r\n                    </ModalFooter>\r\n                  </Modal>\r\n                </CardBody>\r\n                <Alert isOpen={this.state.showError} color=\"danger\" toggle={this.state.dismissError}>\r\n                  {this.state.erro}\r\n                </Alert>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Container>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cadastro;\r\n"],"sourceRoot":""}